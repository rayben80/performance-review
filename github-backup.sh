#!/bin/bash

# GitHub Î∞±ÏóÖ ÏãúÏä§ÌÖú Ïä§ÌÅ¨Î¶ΩÌä∏
# ÌÅ¥ÎùºÏö∞ÎìúÏÇ¨ÏóÖÎ≥∏Î∂Ä ÏóÖÎ¨¥ÌèâÍ∞Ä ÏãúÏä§ÌÖú GitHub Î≤ÑÏ†ÑÎ≥Ñ Î∞±ÏóÖ Í¥ÄÎ¶¨

set -e  # ÏóêÎü¨ Î∞úÏÉù Ïãú Ïä§ÌÅ¨Î¶ΩÌä∏ Ï§ëÎã®

# ÏÉâÏÉÅ Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ÏÑ§Ï†ï
PROJECT_DIR="/home/user/webapp"
GITHUB_REPO="https://github.com/rayben80/performance-review.git"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
VERSION_PREFIX="v"

# ÎèÑÏõÄÎßê Ìï®Ïàò
show_help() {
    echo -e "${BLUE}üêô GitHub Î∞±ÏóÖ Í¥ÄÎ¶¨ ÎèÑÍµ¨${NC}"
    echo ""
    echo "ÏÇ¨Ïö©Î≤ï:"
    echo "  ./github-backup.sh [ÏòµÏÖò]"
    echo ""
    echo "üì¶ Î∞±ÏóÖ ÏòµÏÖò:"
    echo "  backup [Î©îÏãúÏßÄ]     - Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïª§Î∞ã ÌõÑ GitHub Ìë∏Ïãú"
    echo "  version [Î≤ÑÏ†ÑÎ™Ö]    - Î≤ÑÏ†Ñ ÌÉúÍ∑∏ ÏÉùÏÑ± Î∞è Î¶¥Î¶¨Ïä§"
    echo "  stable             - ÏïàÏ†ï Î≤ÑÏ†ÑÏúºÎ°ú ÌÉúÍ∑∏ (ÏûêÎèô Î≤ÑÏ†Ñ)"
    echo ""
    echo "üìã Ï°∞Ìöå ÏòµÏÖò:"  
    echo "  list               - Î°úÏª¨ Î∞±ÏóÖ Î™©Î°ù"
    echo "  versions           - GitHub Î≤ÑÏ†Ñ Î™©Î°ù"
    echo "  status             - Git/GitHub ÏÉÅÌÉú"
    echo "  log                - Ïª§Î∞ã ÌûàÏä§ÌÜ†Î¶¨"
    echo ""
    echo "üîÑ Î≥µÏõê ÏòµÏÖò:"
    echo "  pull               - GitHubÏóêÏÑú ÏµúÏã† Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Í∞ÄÏ†∏Ïò§Í∏∞"
    echo "  restore [ÌÉúÍ∑∏/Ïª§Î∞ã] - ÌäπÏ†ï Î≤ÑÏ†ÑÏúºÎ°ú Î≥µÏõê"
    echo "  sync               - GitHubÏôÄ ÎèôÍ∏∞Ìôî"
    echo ""
    echo "üßπ Í¥ÄÎ¶¨ ÏòµÏÖò:"
    echo "  clean              - Ïò§ÎûòÎêú Î°úÏª¨ Î∏åÎûúÏπò Ï†ïÎ¶¨"
    echo "  help               - Ïù¥ ÎèÑÏõÄÎßê ÌëúÏãú"
}

# GitHub Î∞±ÏóÖ (Ïª§Î∞ã + Ìë∏Ïãú)
github_backup() {
    local message="$1"
    
    echo -e "${YELLOW}üêô GitHub Î∞±ÏóÖ ÏàòÌñâ Ï§ë...${NC}"
    
    cd "$PROJECT_DIR"
    
    # Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÌôïÏù∏
    if git diff --quiet && git diff --cached --quiet; then
        echo -e "${BLUE}üí° Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏóÜÏäµÎãàÎã§.${NC}"
        return 0
    fi
    
    # Í∏∞Î≥∏ Î©îÏãúÏßÄ ÏÑ§Ï†ï
    if [ -z "$message" ]; then
        message="üîÑ AUTO BACKUP: $(date '+%Y-%m-%d %H:%M:%S')"
    fi
    
    # Ïä§ÌÖåÏù¥Ïßï Î∞è Ïª§Î∞ã
    git add .
    git commit -m "$message"
    
    # GitHub Ìë∏Ïãú
    echo -e "${CYAN}üì§ GitHubÏóê Ìë∏Ïãú Ï§ë...${NC}"
    git push origin main
    
    # Ïª§Î∞ã Ìï¥Ïãú Í∞ÄÏ†∏Ïò§Í∏∞
    local commit_hash=$(git rev-parse HEAD)
    local short_hash=$(git rev-parse --short HEAD)
    
    echo -e "${GREEN}‚úÖ GitHub Î∞±ÏóÖ ÏôÑÎ£å${NC}"
    echo -e "${BLUE}üìç Ïª§Î∞ã: ${short_hash}${NC}"
    echo -e "${BLUE}üîó GitHub: ${GITHUB_REPO}${NC}"
    
    return 0
}

# Î≤ÑÏ†Ñ ÌÉúÍ∑∏ ÏÉùÏÑ±
create_version() {
    local version="$1"
    
    cd "$PROJECT_DIR"
    
    # Î≤ÑÏ†ÑÎ™ÖÏù¥ ÏóÜÏúºÎ©¥ ÏûêÎèô ÏÉùÏÑ±
    if [ -z "$version" ]; then
        # ÎßàÏßÄÎßâ ÌÉúÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
        local last_tag=$(git tag -l "${VERSION_PREFIX}*" | sort -V | tail -1)
        if [ -z "$last_tag" ]; then
            version="${VERSION_PREFIX}1.0.0"
        else
            # Î≤ÑÏ†Ñ Î≤àÌò∏ Ï¶ùÍ∞Ä (Ïòà: v1.0.0 -> v1.0.1)
            local last_version=${last_tag#$VERSION_PREFIX}
            local patch_version=$(echo $last_version | cut -d. -f3)
            local new_patch=$((patch_version + 1))
            local major_minor=$(echo $last_version | cut -d. -f1-2)
            version="${VERSION_PREFIX}${major_minor}.${new_patch}"
        fi
    fi
    
    echo -e "${YELLOW}üè∑Ô∏è  Î≤ÑÏ†Ñ ÌÉúÍ∑∏ ÏÉùÏÑ± Ï§ë: ${version}${NC}"
    
    # ÌòÑÏû¨ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïª§Î∞ã (ÏûàÎã§Î©¥)
    if ! git diff --quiet || ! git diff --cached --quiet; then
        git add .
        git commit -m "üöÄ RELEASE: ${version} Î≤ÑÏ†Ñ Ï§ÄÎπÑ"
    fi
    
    # ÌÉúÍ∑∏ ÏÉùÏÑ± Î∞è Ìë∏Ïãú
    git tag -a "$version" -m "üì¶ Release ${version}: $(date '+%Y-%m-%d %H:%M:%S')"
    git push origin main
    git push origin "$version"
    
    echo -e "${GREEN}‚úÖ Î≤ÑÏ†Ñ ${version} ÏÉùÏÑ± ÏôÑÎ£å${NC}"
    echo -e "${BLUE}üîó GitHub Î¶¥Î¶¨Ïä§: ${GITHUB_REPO}/releases/tag/${version}${NC}"
    
    return 0
}

# ÏïàÏ†ï Î≤ÑÏ†Ñ ÌÉúÍ∑∏ ÏÉùÏÑ±
create_stable_version() {
    echo -e "${YELLOW}üåü ÏïàÏ†ï Î≤ÑÏ†Ñ ÏÉùÏÑ± Ï§ë...${NC}"
    
    cd "$PROJECT_DIR"
    
    # ÌòÑÏû¨ ÏãúÏ†êÏùò ÏïàÏ†ï Î≤ÑÏ†Ñ ÏÉùÏÑ±
    local stable_version="${VERSION_PREFIX}stable-${TIMESTAMP}"
    
    # Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïª§Î∞ã
    if ! git diff --quiet || ! git diff --cached --quiet; then
        git add .
        git commit -m "‚úÖ STABLE: ÏïàÏ†ï Î≤ÑÏ†Ñ ${stable_version}"
    fi
    
    # ÏïàÏ†ï ÌÉúÍ∑∏ ÏÉùÏÑ±
    git tag -a "$stable_version" -m "üåü Stable Release: $(date '+%Y-%m-%d %H:%M:%S')

üîß Ï£ºÏöî Í∏∞Îä•:
- ÎìúÎûòÍ∑∏Ïï§ÎìúÎ°≠ Î¨∏Ï†ú Ìï¥Í≤∞
- ÏÇ¨Ïù¥ÎìúÎ∞î Ìå®ÎÑê ÏãúÏä§ÌÖú
- Excel ÏóÖÎ°úÎìú/Îã§Ïö¥Î°úÎìú
- Î∞±ÏóÖ/Î≥µÏõê ÏãúÏä§ÌÖú
- GitHub Î≤ÑÏ†Ñ Í¥ÄÎ¶¨

üéØ Ïù¥ Î≤ÑÏ†ÑÏùÄ Í≤ÄÏ¶ùÎêú ÏïàÏ†ï Î≤ÑÏ†ÑÏûÖÎãàÎã§."
    
    git push origin main
    git push origin "$stable_version"
    
    echo -e "${GREEN}‚úÖ ÏïàÏ†ï Î≤ÑÏ†Ñ ${stable_version} ÏÉùÏÑ± ÏôÑÎ£å${NC}"
    
    return 0
}

# GitHub Î≤ÑÏ†Ñ Î™©Î°ù Ï°∞Ìöå
list_github_versions() {
    echo -e "${BLUE}üè∑Ô∏è  GitHub Î≤ÑÏ†Ñ Î™©Î°ù${NC}"
    echo ""
    
    cd "$PROJECT_DIR"
    
    # ÏõêÍ≤© ÌÉúÍ∑∏ Í∞ÄÏ†∏Ïò§Í∏∞
    git fetch --tags 2>/dev/null || true
    
    # ÌÉúÍ∑∏ Î™©Î°ù ÌëúÏãú
    if git tag -l | grep -q .; then
        echo -e "${PURPLE}Î≤ÑÏ†Ñ          ÎÇ†Ïßú/ÏãúÍ∞Ñ${NC}"
        echo "--------------------------------"
        
        git tag -l --sort=-version:refname | while read tag; do
            # ÌÉúÍ∑∏Ïùò Ïª§Î∞ã ÎÇ†Ïßú Í∞ÄÏ†∏Ïò§Í∏∞
            local commit_date=$(git log -1 --format=%cd --date=format:'%Y-%m-%d %H:%M:%S' "$tag" 2>/dev/null)
            if [ -n "$commit_date" ]; then
                echo -e "${tag}      ${commit_date}"
            else
                echo -e "${tag}      (ÎÇ†Ïßú Î∂àÎ™Ö)"
            fi
        done
        
        echo ""
        echo -e "${CYAN}üí° ÏµúÏã† ÌÉúÍ∑∏: $(git tag -l --sort=-version:refname | head -1)${NC}"
    else
        echo -e "${YELLOW}ÏÉùÏÑ±Îêú Î≤ÑÏ†ÑÏù¥ ÏóÜÏäµÎãàÎã§.${NC}"
    fi
    
    return 0
}

# GitHubÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
github_pull() {
    echo -e "${CYAN}üì• GitHubÏóêÏÑú ÏµúÏã† Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Í∞ÄÏ†∏Ïò§Îäî Ï§ë...${NC}"
    
    cd "$PROJECT_DIR"
    
    # Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Î∞±ÏóÖ
    if ! git diff --quiet || ! git diff --cached --quiet; then
        echo -e "${YELLOW}‚ö†Ô∏è  ÌòÑÏû¨ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ÏùÑ ÏûÑÏãú Ï†ÄÏû•Ìï©ÎãàÎã§...${NC}"
        git stash push -m "ÏûÑÏãú Ï†ÄÏû•: $(date '+%Y-%m-%d %H:%M:%S')"
    fi
    
    # GitHubÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
    git fetch origin
    git merge origin/main
    
    # ÏûÑÏãú Ï†ÄÏû•Îêú Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏûàÏúºÎ©¥ Î≥µÏõê Ï†úÏïà
    if git stash list | grep -q "ÏûÑÏãú Ï†ÄÏû•"; then
        echo -e "${BLUE}üí° ÏûÑÏãú Ï†ÄÏû•Îêú Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏûàÏäµÎãàÎã§.${NC}"
        echo -e "${BLUE}   Î≥µÏõêÌïòÎ†§Î©¥: git stash pop${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ GitHub ÎèôÍ∏∞Ìôî ÏôÑÎ£å${NC}"
    
    return 0
}

# ÌäπÏ†ï Î≤ÑÏ†ÑÏúºÎ°ú Î≥µÏõê
restore_version() {
    local version="$1"
    
    if [ -z "$version" ]; then
        echo -e "${RED}‚ùå Î≥µÏõêÌï† Î≤ÑÏ†ÑÏùÑ ÏßÄÏ†ïÌïòÏÑ∏Ïöî.${NC}"
        list_github_versions
        return 1
    fi
    
    echo -e "${YELLOW}üîÑ Î≤ÑÏ†Ñ ${version}ÏúºÎ°ú Î≥µÏõê Ï§ë...${NC}"
    
    cd "$PROJECT_DIR"
    
    # ÌòÑÏû¨ ÏÉÅÌÉú Î∞±ÏóÖ
    echo -e "${BLUE}üíæ ÌòÑÏû¨ ÏÉÅÌÉú Î∞±ÏóÖ Ï§ë...${NC}"
    ./backup-system.sh backup
    
    # PM2 ÏÑúÎπÑÏä§ Ï§ëÏßÄ
    pm2 delete webapp 2>/dev/null || true
    
    # Î≤ÑÏ†ÑÏúºÎ°ú Ï≤¥ÌÅ¨ÏïÑÏõÉ
    git fetch --tags 2>/dev/null || true
    git checkout "$version"
    
    # ÏÉà Î∏åÎûúÏπò ÏÉùÏÑ± (ÌÉúÍ∑∏Îäî ÏàòÏ†ï Î∂àÍ∞ÄÏù¥ÎØÄÎ°ú)
    local restore_branch="restore-${version}-${TIMESTAMP}"
    git checkout -b "$restore_branch"
    git checkout main
    git merge "$restore_branch"
    
    # Î∏åÎûúÏπò Ï†ïÎ¶¨
    git branch -D "$restore_branch"
    
    # ÏÑúÎπÑÏä§ Ïû¨ÏãúÏûë
    echo -e "${YELLOW}üöÄ ÏÑúÎπÑÏä§ Ïû¨ÏãúÏûë Ï§ë...${NC}"
    pm2 start ecosystem.config.cjs 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Î≤ÑÏ†Ñ ${version} Î≥µÏõê ÏôÑÎ£å${NC}"
    
    return 0
}

# GitHubÏôÄ ÎèôÍ∏∞Ìôî
sync_github() {
    echo -e "${CYAN}üîÑ GitHub ÏôÑÏ†Ñ ÎèôÍ∏∞Ìôî Ï§ë...${NC}"
    
    cd "$PROJECT_DIR"
    
    # Î°úÏª¨ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïª§Î∞ã
    if ! git diff --quiet || ! git diff --cached --quiet; then
        git add .
        git commit -m "üîÑ SYNC: ÎèôÍ∏∞Ìôî Ï†Ñ Î°úÏª¨ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïª§Î∞ã"
    fi
    
    # GitHubÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
    git fetch origin
    
    # Ï∂©Îèå Î∞©ÏßÄÎ•º ÏúÑÌïú Î≥ëÌï©
    if ! git merge origin/main --no-edit; then
        echo -e "${RED}‚ùå Î≥ëÌï© Ï∂©ÎèåÏù¥ Î∞úÏÉùÌñàÏäµÎãàÎã§.${NC}"
        echo -e "${YELLOW}ÏàòÎèôÏúºÎ°ú Ï∂©ÎèåÏùÑ Ìï¥Í≤∞Ìïú ÌõÑ Îã§Ïùå Î™ÖÎ†πÏùÑ Ïã§ÌñâÌïòÏÑ∏Ïöî:${NC}"
        echo "  git add ."
        echo "  git commit -m 'Resolve merge conflicts'"
        echo "  git push origin main"
        return 1
    fi
    
    # GitHubÎ°ú Ìë∏Ïãú
    git push origin main
    
    # ÌÉúÍ∑∏ÎèÑ ÎèôÍ∏∞Ìôî
    git push --tags
    
    echo -e "${GREEN}‚úÖ GitHub ÏôÑÏ†Ñ ÎèôÍ∏∞Ìôî ÏôÑÎ£å${NC}"
    
    return 0
}

# Git ÏÉÅÌÉú ÌôïÏù∏
check_git_status() {
    echo -e "${BLUE}üìä Git/GitHub ÏÉÅÌÉú ÌôïÏù∏${NC}"
    echo ""
    
    cd "$PROJECT_DIR"
    
    # Î∏åÎûúÏπò Ï†ïÎ≥¥
    echo -e "${PURPLE}ÌòÑÏû¨ Î∏åÎûúÏπò:${NC}"
    git branch --show-current
    echo ""
    
    # ÏõêÍ≤© Ï†ÄÏû•ÏÜå Ï†ïÎ≥¥
    echo -e "${PURPLE}ÏõêÍ≤© Ï†ÄÏû•ÏÜå:${NC}"
    git remote -v | head -1
    echo ""
    
    # Î°úÏª¨ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
    echo -e "${PURPLE}Î°úÏª¨ Î≥ÄÍ≤ΩÏÇ¨Ìï≠:${NC}"
    if git diff --quiet && git diff --cached --quiet; then
        echo "Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏóÜÏùå"
    else
        git status --porcelain | head -5
    fi
    echo ""
    
    # GitHubÏôÄÏùò ÎèôÍ∏∞Ìôî ÏÉÅÌÉú
    echo -e "${PURPLE}GitHub ÎèôÍ∏∞Ìôî ÏÉÅÌÉú:${NC}"
    git fetch origin 2>/dev/null || true
    local ahead=$(git rev-list --count HEAD ^origin/main 2>/dev/null || echo "0")
    local behind=$(git rev-list --count origin/main ^HEAD 2>/dev/null || echo "0")
    
    if [ "$ahead" -gt 0 ]; then
        echo -e "${YELLOW}‚¨ÜÔ∏è  GitHubÎ≥¥Îã§ ${ahead}Í∞ú Ïª§Î∞ã ÏïûÏÑ¨ (Ìë∏Ïãú ÌïÑÏöî)${NC}"
    elif [ "$behind" -gt 0 ]; then
        echo -e "${YELLOW}‚¨áÔ∏è  GitHubÎ≥¥Îã§ ${behind}Í∞ú Ïª§Î∞ã Îí§Ï≤òÏßê (ÌíÄ ÌïÑÏöî)${NC}"
    else
        echo -e "${GREEN}‚úÖ GitHubÏôÄ ÎèôÍ∏∞ÌôîÎê®${NC}"
    fi
    echo ""
    
    # ÏµúÍ∑º Ïª§Î∞ã
    echo -e "${PURPLE}ÏµúÍ∑º Ïª§Î∞ã (ÏµúÎåÄ 3Í∞ú):${NC}"
    git log --oneline -3
    echo ""
    
    # ÌÉúÍ∑∏ Ï†ïÎ≥¥
    echo -e "${PURPLE}ÏÉùÏÑ±Îêú Î≤ÑÏ†Ñ Ïàò:${NC}"
    local tag_count=$(git tag -l | wc -l)
    echo "${tag_count}Í∞ú"
    
    return 0
}

# Ïª§Î∞ã ÌûàÏä§ÌÜ†Î¶¨ Ï°∞Ìöå
show_commit_log() {
    echo -e "${BLUE}üìú Ïª§Î∞ã ÌûàÏä§ÌÜ†Î¶¨${NC}"
    echo ""
    
    cd "$PROJECT_DIR"
    
    # Í∑∏ÎûòÌîÑ ÌòïÌÉúÎ°ú Î°úÍ∑∏ ÌëúÏãú
    git log --oneline --graph --decorate --all -10
    
    return 0
}

# Ïò§ÎûòÎêú Î∏åÎûúÏπò Ï†ïÎ¶¨
clean_branches() {
    echo -e "${YELLOW}üßπ Î°úÏª¨ Î∏åÎûúÏπò Ï†ïÎ¶¨ Ï§ë...${NC}"
    
    cd "$PROJECT_DIR"
    
    # Î≥ëÌï©Îêú Î°úÏª¨ Î∏åÎûúÏπò ÏÇ≠Ï†ú (main Ï†úÏô∏)
    git branch --merged | grep -v "\* main" | grep -v "main" | xargs -r git branch -d
    
    # ÏõêÍ≤© Ï∂îÏ†Å Î∏åÎûúÏπò Ï†ïÎ¶¨
    git remote prune origin
    
    echo -e "${GREEN}‚úÖ Î∏åÎûúÏπò Ï†ïÎ¶¨ ÏôÑÎ£å${NC}"
    
    return 0
}

# Î©îÏù∏ Ïã§Ìñâ Î∂ÄÎ∂Ñ
case "${1:-help}" in
    "backup")
        github_backup "$2"
        ;;
    "version")
        create_version "$2"
        ;;
    "stable")
        create_stable_version
        ;;
    "list")
        ./backup-system.sh list
        ;;
    "versions")
        list_github_versions
        ;;
    "pull")
        github_pull
        ;;
    "restore")
        restore_version "$2"
        ;;
    "sync")
        sync_github
        ;;
    "status")
        check_git_status
        ;;
    "log")
        show_commit_log
        ;;
    "clean")
        clean_branches
        ;;
    "help"|*)
        show_help
        ;;
esac